# Default values for matic.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  heimdalld:
    repository: maticnetwork/heimdall
    pullPolicy: IfNotPresent
    tag: v0.2.0
    command: ["heimdalld", "start", "--home", "/var/lib/heimdalld", "--log_level","*:info"]
  bor:
    repository: maticnetwork/bor
    pullPolicy: IfNotPresent
    tag: v0.2.0
    command: ["bor", "start"]


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

volumes:
  data:
    mountPath: /root/.heimdalld

persistence:
  enabled: true
  annotations: {}
  accessModes: 
    - ReadWriteOnce
  size: 40Gi

  ## A manually managed Persistent Volume and Claim
  ## If defined, PVC must be created manually before volume will be bound
  ## The value is evaluated as a template, so, for example, the name can depend on .Release or .Chart
  ##  
  # existingClaim:

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

container:
  ports:
    http: 26657
    ws: 26656

service:
  type: ClusterIP
  http: 26657
  ws: 26656

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
